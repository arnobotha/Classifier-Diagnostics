> # ===================================== DATA ENRICH =====================================
> # Use the macroeconomic dataset, performing various data preparation steps on it, and
> # create features using the macroeconomic variables that can be used in model development
> # ---------------------------------------------------------------------------------------
> # PROJECT TITLE: Classifier Diagnostics
> # SCRIPT AUTHOR(S): Dr Arno Botha, Esmerelda Oberholzer
> 
> # DESCRIPTION:
> # This script prepares raw data into a more meaningful form to facilitate modelling.
> # This preparation includes the following high-level steps:
> #   1) creating some basic derived fields within macroeconomic datasets
> #   2) removing redundant fields in macroeconomic datasets to optimise sizes
> #   3) checking data grains and fusing datasets accordingly
> #   4) Interleaving fused fields appropriately between either the left or right side 
> #      during the previous merge
> #   5) interpolating certain fields that represent important time series as a missing
> #      value treatment that arose during merging quarterly with monthly data
> #   6) checking and confirming that missingness has been successfully treated
> #   7) subsetting data from pre-specified start point & scaling time series appropriately
> # ---------------------------------------------------------------------------------------
> # -- Script dependencies:
> #   - 0.Setup.R
> #   - 1.Data_Import.R
> #   - 2a.Data_Prepare_Credit_Basic.R
> #   - 2b.Data_Prepare_Credit_Advanced.R
> #   - 2c.Data_Prepare_Credit_Advanced2.R
> #   - 2d.Data_Enrich.R
> 
> # -- Inputs:
> #   - various parameters set in the setup script 0
> #   - macro_data_m | monthly macroeconomic data imported in script 1
> #   - macro_data_q | quarterly macroeconomic data imported in script 1
> #
> # -- Outputs:
> #   - datMV | enriched macroeconomic dataset, with various features
> # ---------------------------------------------------------------------------------------
> # NOTE: This script predominantly comes from another project (SICR-modelling), 
> # but with a few changes to create more features, and enriched by the "C-FLI" project (Botha2020)
> # =======================================================================================
> 
> 
> 
> 
> # ------- 1. Macroeconomic data | Basic Data Cleaning & Checks
> # Basic cleaning, light transforms, and confirming the supposed data grain
> 
> ptm <- proc.time() # for runtime calculations (ignore)
> 
> 
> # -- ensure dates are correctly converted
> macro_data_m[, Date_T := as.POSIXct(EffectiveDate, format="%Y-%m-%d")]
> macro_data_q[, Date_T := as.POSIXct(EffectiveDate, format="%Y-%m-%d")]
> 
> # -- create YYYMM abstractions for easier reference
> macro_data_m[, Period := year(Date_T)*100 + month(Date_T)]
> macro_data_q[, Period := year(Date_T)*100 + month(Date_T)]
> 
> # -- remove redundant date fields 
> # (these may be removed during initial data extraction within SAS, when engineering a proper data process)
> macro_data_m[, `:=`(EffectiveDate = NULL, YEAR = NULL, Country = NULL, Source = NULL, Loaddatetime = NULL,
+                     Process_Start_DateTime = NULL, Process_End_datetime = NULL, TABLE_freq = NULL)]
> macro_data_q[, `:=`(EffectiveDate = NULL, Quarter = NULL, Country = NULL, Source = NULL, Loaddatetime = NULL,
+                     Process_Start_DateTime = NULL, Process_End_DateTime = NULL, TABLE_freq = NULL)]
> 
> # the credit index has changed - remove forecasts
> macro_data_m <- subset(macro_data_m, Scenario=='Historic')
> macro_data_q <- subset(macro_data_q, Type=='Historic')
> 
> # [SANITY CHECK] Confirm all macroeconomic records to have no missingness in its supposed key (derived from EffectiveDate)
> (check0 <- macro_data_m[is.na(Period), .N] == 0 & macro_data_q[is.na(Period), .N] == 0)
[1] TRUE
> cat( check0 %?% 'SAFE: [Period]-key contains no missingness.\n' %:% 'WARNING: [Period]-key contains missingness.\n')
SAFE: [Period]-key contains no missingness.
> 
> # -- Conditionally subset from all datasets to ensure we have non-zero values in all key fields
> if (!check0) {
+   macro_data_m <- subset(macro_data_m, !is.na(Period))
+   macro_data_q <- subset(macro_data_q, !is.na(Period)) 
+ }
> 
> # - testing final data grains on proposed keys
> cat( (macro_data_m[,list(Freqs = .N), by=list(Period, Scenario)][Freqs > 1, .N] == 0) %?% 'SAFE: Grain confirmed.\n' %:% 
+        paste0('ERROR, grain broken for ', macro_data_m[,list(Freqs = .N), by=list(Period, Scenario)][Freqs > 1,.N], " cases.\n")
+ )
SAFE: Grain confirmed.
> 
> cat( (macro_data_q[,list(Freqs = .N), by=list(Period, Scenario)][Freqs > 1,.N] == 0) %?% cat('SAFE: Grain confirmed.\n') %:% 
+        cat(paste0('ERROR, grain broken for ', macro_data_q[,list(Freqs = .N), by=list(Period, Scenario)][Freqs > 1,.N], " cases.\n"))
+ )
SAFE: Grain confirmed.
> 
> # - grains passed, create a single primary key
> macro_data_m[, Key := paste0(Period,"-",Scenario)]
> macro_data_q[, Key := paste0(Period,"-",Scenario)]
> 
> 
> 
> 
> 
> # --------- 2. Data fusion & Interleaving & Interpolation
> # Merging monthly and quarterly data together and interleaving
> # fields accordingly. Also a bit of interpolation on some time series
> 
> # - fuse data using a simple left join between monthly and quarterly
> macro_data <- merge(macro_data_m, macro_data_q, by=c("Key"), all.x=T)
> 
> # - simple coalesces and interleaving transformations for one-sided missingness
> # uses custom fusion function "interleave()" defined in 0.Setup
> macro_data[, Date_T := interleave(Date_T.x, Date_T.y, na.value = as.POSIXct(NA), pref='X') ]
> macro_data[, Period := interleave(Period.x, Period.y, na.value = as.double(NA), pref='X') ]
> macro_data[, Type := interleave(Type.x, Type.y, na.value = as.character(NA), pref='X') ]
> macro_data[, Scenario := interleave(Scenario.x, Scenario.y, na.value = as.character(NA), pref='X') ]
> 
> # - remove fields made redundant due to fusion
> suppressWarnings(macro_data[, `:=`(Date_T.x = NULL, Date_T.y = NULL, Type.x = NULL, Type.y = NULL, 
+                                    Scenario.x = NULL, Scenario.y = NULL, Period.x = NULL, Period.y = NULL,
+                                    Probability.x = NULL, Probability.y = NULL)])
> 
> # - create quarterly key, given that Date_T refers to last date of each month
> # and that quarterly data points are retrospective
> macro_data[, Period_Qtr := case_when(
+   month(Date_T) >= 1 & month(Date_T) < 4 ~ paste0(year(Date_T), "Q1"),
+   month(Date_T) >= 4 & month(Date_T) < 7 ~ paste0(year(Date_T), "Q2"),
+   month(Date_T) >= 7 & month(Date_T) < 10 ~ paste0(year(Date_T), "Q3"),
+   month(Date_T) >= 10 ~ paste0(year(Date_T), "Q4")
+ )]
> 
> # - Missing value treatment: Quarterly data have missing values for interleaved months. 
> # We can linearly interpolate for the in-between months
> # uses custom interpolation function "interPol()" defined in 0.Setup
> macro_data[, Employment_Growth_YoY := interPol(Employment_Growth_YoY), by=list(Scenario)]
> macro_data[, Household_debt_Level_income := interPol(Household_debt_Level_income), by=list(Scenario)]
> macro_data[, Household_DSC_Level_income := interPol(Household_DSC_Level_income), by=list(Scenario)]
> macro_data[, RealGDP_Growth_yoy := interPol(RealGDP_Growth_yoy), by=list(Scenario)]
> macro_data[, Consumption_Growth_yoy := interPol(Consumption_Growth_yoy), by=list(Scenario)]
> macro_data[, Durables_Growth_yoy := interPol(Durables_Growth_yoy), by=list(Scenario)]
> macro_data[, Nominal_GDP_Growth_yoy := interPol(Nominal_GDP_Growth_yoy), by=list(Scenario)]
> macro_data[, Nominal_income_Growth_yoy := interPol(Nominal_income_Growth_yoy), by=list(Scenario)]
> macro_data[, Real_income_Growth_YoY := interPol(Real_income_Growth_YoY), by=list(Scenario)]
> 
> # [SANITY CHECK] Confirm successful treatment, considering previous sanity check
> check2 <- all(is.na(macro_data$Employment_Growth_YoY) == F) & all(is.na(macro_data$Household_debt_Level_income) == F) & 
+   (all(is.na(macro_data$Household_DSC_Level_income) == F)) & all(is.na(macro_data$RealGDP_Growth_yoy) == F) & 
+   all(is.na(macro_data$Consumption_Growth_yoy) == F) & (all(is.na(macro_data$Durables_Growth_yoy) == F)) &
+   (all(is.na(macro_data$Nominal_GDP_Growth_yoy) == F)) & (all(is.na(macro_data$Nominal_income_Growth_yoy) == F)) &
+   (all(is.na(macro_data$Real_income_Growth_YoY) == F))
> cat( check2 %?% 'SAFE: Interpolation successful with no residual missingness where relevant.\n' %:% 'WARNING: Residual missingness detected, treatment failed.\n')
SAFE: Interpolation successful with no residual missingness where relevant.
> 
> # -- remove useless macroeconomic variables that are currently not forecast
> macro_data[, `:=`(rbqn_rb1419w = NULL, HPI_Level_EOP = NULL, HPI_Level_SA = NULL, HPI_level_SA_MoM_Change = NULL,
+                   sahp_fnbhpgp = NULL, sahp_fnbhpwc = NULL, sahp_fnbhpkzn = NULL, sahp_fnbhpec = NULL, sahp_fnbhpoth = NULL,
+                   rbqn_rb5339m = NULL)]
> 
> 
> 
> 
> 
> # --------- 3. Missing Value Treatments & Scaling
> # Subset only relevant periods (and fields), apply missing value treatments, and scale domains
> 
> # --- a. Subsetting
> 
> # - subet only relevant macroeconomic variables (chosen by discretion) from historic data (exclude forecasts) beyond a certain point
> data.start <- "1980-01-01" # other (tested) options include 1980, 1999, 2005, 2010
> macro_data_hist <- subset(macro_data, Type == "Historic" & Date_T >= data.start)[, list(Key, Period, Period_Qtr, Date_T, 
+                                                                                         Inflation = Inflation_Growth_YoY,
+                                                                                         Repo_Rate = Repo_rate_level_eop,
+                                                                                         HousePriceIndex_Rate = HPI_Growth_Yoy_perc,
+                                                                                         Employment_Rate = Employment_Growth_YoY,
+                                                                                         DebtServiceCosts_Rate = Household_DSC_Level_income,
+                                                                                         DebtToIncome_Rate = Household_debt_Level_income,
+                                                                                         RealGDP_Rate = RealGDP_Growth_yoy,
+                                                                                         NominalGDP_Rate = Nominal_GDP_Growth_yoy,
+                                                                                         RealIncome_Rate = Real_income_Growth_YoY,
+                                                                                         NominalIncome_Rate = Nominal_income_Growth_yoy,
+                                                                                         Consumption_Rate = Consumption_Growth_yoy,
+                                                                                         Durables_Rate = Durables_Growth_yoy)]
> 
> # --- b. Missing value treatments
> 
> # - quickly investigate any missings by conducting high-level distribution analysis 
> describe(macro_data_hist[, list(Inflation, Repo_Rate, HousePriceIndex_Rate, Employment_Rate, DebtServiceCosts_Rate, DebtToIncome_Rate, RealGDP_Rate,
+                                 NominalGDP_Rate, RealIncome_Rate, NominalIncome_Rate, Consumption_Rate, Durables_Rate)])
macro_data_hist[, list(Inflation, Repo_Rate, HousePriceIndex_Rate, Employment_Rate, DebtServiceCosts_Rate, DebtToIncome_Rate, RealGDP_Rate, NominalGDP_Rate, RealIncome_Rate, NominalIncome_Rate, Consumption_Rate, Durables_Rate)] 

 12  Variables      516  Observations
--------------------------------------------------------------------------------------------------------------------------------------------------
Inflation 
       n  missing distinct     Info     Mean  pMedian      Gmd      .05      .10      .25      .50      .75      .90      .95 
     515        1      310        1    8.679      8.6    5.182    2.987    3.625    5.100    7.100   12.850   15.500   16.300 

lowest : 0.2  0.3  0.4  0.6  0.7 , highest: 18.7 18.9 19.2 19.7 20.7
--------------------------------------------------------------------------------------------------------------------------------------------------
Repo_Rate 
       n  missing distinct     Info     Mean  pMedian      Gmd      .05      .10      .25      .50      .75      .90      .95 
     516        0       50    0.999    10.59     10.5    5.235     4.75     5.50     6.50    10.50    14.50    16.75    17.50 

lowest : 3.5  3.75 4    4.25 4.75, highest: 20   20.5 21   21.5 22  
--------------------------------------------------------------------------------------------------------------------------------------------------
HousePriceIndex_Rate 
       n  missing distinct     Info     Mean  pMedian      Gmd      .05      .10      .25      .50      .75      .90      .95 
     503       13      503        1    9.821      9.1    10.25   -4.299    1.045    3.787    6.770   14.766   21.229   31.746 

lowest : -9.00716 -8.89562 -8.81077 -8.60166 -8.27668, highest: 40.1729  40.4491  41.1257  41.2074  41.4636 
--------------------------------------------------------------------------------------------------------------------------------------------------
Employment_Rate : Employment_Growth_YoY 
       n  missing distinct     Info     Mean  pMedian      Gmd      .05      .10      .25      .50      .75      .90      .95 
     516        0      508        1     1.14    1.078    2.512 -2.32706 -1.15863 -0.04636  0.88273  2.31200  3.78158  5.64311 

lowest : -6.94716 -6.72294 -6.49873 -6.27451 -6.1168 , highest: 7.65391  7.90327  8.01678  8.15262  8.40198 
--------------------------------------------------------------------------------------------------------------------------------------------------
DebtServiceCosts_Rate : Household DSC_Level_income 
       n  missing distinct     Info     Mean  pMedian      Gmd      .05      .10      .25      .50      .75      .90      .95 
     516        0      222        1    7.942    7.983    2.212    4.458    5.233    6.833    8.333    8.867   10.533   11.083 

lowest : 2.77393 2.83626 2.9     2.96667 3.03333, highest: 12.9    12.9667 13      13.0333 13.1   
--------------------------------------------------------------------------------------------------------------------------------------------------
DebtToIncome_Rate : Household debt_Level_income 
       n  missing distinct     Info     Mean  pMedian      Gmd      .05      .10      .25      .50      .75      .90      .95 
     516        0      382        1    55.88    55.88    12.73    40.73    42.62    46.85    53.42    65.30    71.23    75.05 

lowest : 31.7809 32.7264 33.7    34.7333 35.7667, highest: 77.6    77.7667 77.9    78.0333 78.3   
--------------------------------------------------------------------------------------------------------------------------------------------------
RealGDP_Rate : RealGDP_Growth_yoy 
       n  missing distinct     Info     Mean  pMedian      Gmd      .05      .10      .25      .50      .75      .90      .95 
     516        0      513        1    2.123    2.262    2.703  -1.9975  -1.0734   0.7506   2.4459   3.7881   5.3176   5.5367 

lowest : -7.04753 -6.81251 -6.57749 -6.34248 -6.11207, highest: 6.50747  6.53684  6.56404  6.57873  6.62061 
--------------------------------------------------------------------------------------------------------------------------------------------------
NominalGDP_Rate : Nominal_GDP_Growth_yoy 
       n  missing distinct     Info     Mean  pMedian      Gmd      .05      .10      .25      .50      .75      .90      .95 
     516        0      513        1    12.12    11.89    5.534    5.333    6.713    8.405   12.130   14.749   17.863   20.381 

lowest : -1.61036  -1.41054  -1.21073  -1.01091  -0.968835, highest: 29.8742   30.6171   30.8095   31.0019   31.1942  
--------------------------------------------------------------------------------------------------------------------------------------------------
RealIncome_Rate : Real_income_Growth_YoY 
       n  missing distinct     Info     Mean  pMedian      Gmd      .05      .10      .25      .50      .75      .90      .95 
     516        0      513        1    2.685     2.64    3.178  -2.7348  -0.5339   1.0543   2.6232   4.2269   6.2524   7.3235 

lowest : -5.64354 -5.25451 -4.86549 -4.84462 -4.83221, highest: 11.8956  12.3531  12.5092  12.8106  13.268  
--------------------------------------------------------------------------------------------------------------------------------------------------
NominalIncome_Rate : Nominal_income_Growth_yoy 
       n  missing distinct     Info     Mean  pMedian      Gmd      .05      .10      .25      .50      .75      .90      .95 
     516        0      513        1    12.28    12.16    5.916    5.367    7.028    8.436   11.616   16.003   19.437   21.488 

lowest : -3.2209  -2.73771 -2.25452 -1.77133 -1.43941, highest: 26.1778  26.3732  26.6076  27.0375  27.4673 
--------------------------------------------------------------------------------------------------------------------------------------------------
Consumption_Rate : Consumption_Growth_yoy 
       n  missing distinct     Info     Mean  pMedian      Gmd      .05      .10      .25      .50      .75      .90      .95 
     516        0      513        1    2.906    2.962    3.175  -2.1221  -0.8251   1.3085   2.9377   4.6250   6.5318   7.7759 

lowest : -7.25911 -6.79541 -6.3317  -5.868   -5.53771, highest: 9.18677  9.26575  9.40644  9.54713  9.68783 
--------------------------------------------------------------------------------------------------------------------------------------------------
Durables_Rate : Durables_Growth_yoy 
       n  missing distinct     Info     Mean  pMedian      Gmd      .05      .10      .25      .50      .75      .90      .95 
     516        0      513        1    3.326    3.554    10.53  -11.913   -7.971   -1.790    2.842    9.231   14.852   17.806 

lowest : -30.1157 -29.3344 -28.5531 -27.7718 -26.537 , highest: 28.7497  28.9962  29.2119  29.6742  30.1364 
--------------------------------------------------------------------------------------------------------------------------------------------------
> # -- Results: Some series have missing values (not previously treated during quarterly-monthly fusion)
> 
> # - Interpolate all remaining macroeconomic variables as a failsafe against missing values in some months
> # uses custom interpolation function "interPol()" defined in 0.Setup
> macro_data_hist[, Inflation := interPol(Inflation)]
> macro_data_hist[, Repo_Rate := interPol(Repo_Rate)]
> macro_data_hist[, HousePriceIndex_Rate := interPol(HousePriceIndex_Rate)]
> 
> # - check success of treatment
> check3 <- !any(is.na(macro_data_hist[, list(Inflation, Repo_Rate, HousePriceIndex_Rate, Employment_Rate, DebtServiceCosts_Rate, DebtToIncome_Rate, RealGDP_Rate,
+                                             NominalGDP_Rate, RealIncome_Rate, NominalIncome_Rate, Consumption_Rate, Durables_Rate)]))
> # Treatment worked as expected (FALSE). No more missing values.
> cat( check3 %?% 'SAFE: Interpolation successful with no residual missingness where relevant.\n' %:% 'WARNING: Residual missingness detected, treatment failed.\n')
SAFE: Interpolation successful with no residual missingness where relevant.
> 
> 
> 
> 
> 
> # --------- 4. Subsetting
> # Subset macroeconomic fields and carry out light data preparation
> # We only want the following macroeconomic variables (MVs), as found to be significant by Botha et al. (2020) during 
> # the "C-FLI" project using an in-depth clustering process
> # - Real income growth rate
> # - Real GDP growth rate
> # - Repo rate (not scaled as we want to use it for a new variable)
> # - Employment index growth rate
> # - Household DDI ratio
> # - Inflation growth rate
> 
> # - Subsample monthly historical macroeconomic information with some light data preparation
> datMV <- macro_data_hist[,list(Date=as.Date(Date_T, format="%Y-%m-%d"),
+                                         M_Repo_Rate = Repo_Rate/100, 
+                                         M_Inflation_Growth = round(Inflation/100,digits=4),
+                                         M_DTI_Growth = round(DebtToIncome_Rate/100,digits=4),
+                                         M_Emp_Growth = round(Employment_Rate/100,digits=4),
+                                         M_RealGDP_Growth = round(RealGDP_Rate/100,digits=4),
+                                         M_RealIncome_Growth = round(RealIncome_Rate/100,digits=4))]
> 
> 
> 
> 
> 
> # ------ 5. General cleanup & checks
> 
> # - Clean-up
> rm(macro_data, macro_data_hist, macro_data_m, macro_data_q)
> 
> # - Save to disk (zip) for quick disk-based retrieval later
> pack.ffdf(paste0(genPath, "datMV"), datMV); gc()
             used    (Mb) gc trigger    (Mb)   max used    (Mb)
Ncells    5368734   286.8    9992169   533.7    9992169   533.7
Vcells 3777749096 28822.0 7196812257 54907.4 7196725010 54906.7
> proc.time() - ptm # IGNORE: elapsed runtime
   user  system elapsed 
   1.69    0.25    2.06 