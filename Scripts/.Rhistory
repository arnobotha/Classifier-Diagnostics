(g_model_diag_compar <- ggplot(datPlot_diag, aes(x=Statistic, y=Value, group=Model)) +
theme_minimal() + theme(legend.position = "bottom") + labs(x="Statistic", y="Value") +
geom_col(aes(colour=Model, fill=Model), position="dodge") +
geom_label(aes(label=Label), fill = col.v2, colour = col.v3, position=position_dodge(0.9)) +
scale_colour_manual(name="Model:", values=col.v, labels=label.v) +
scale_fill_manual(name="Model:", values=col.v, labels=label.v) +
scale_x_discrete(lables=c("Coeffcient of Determination")) +
scale_y_continuous(breaks=pretty_breaks(), label=percent))
(g_model_diag_compar <- ggplot(datPlot_diag, aes(x=Statistic, y=Value, group=Model)) +
theme_minimal() + theme(legend.position = "bottom") + labs(x="Statistic", y="Value") +
geom_col(aes(colour=Model, fill=Model), position="dodge") +
geom_label(aes(label=Label), fill = col.v2, colour = col.v3, position=position_dodge(0.9)) +
scale_colour_manual(name="Model:", values=col.v, labels=label.v) +
scale_fill_manual(name="Model:", values=col.v, labels=label.v) +
scale_x_discrete(labels=c("Coeffcient of Determination")) +
scale_y_continuous(breaks=pretty_breaks(), label=percent))
# --- Plotting model diagnostics
# - Creating the plotting dataset
datPlot_diag <- rbind(data.table(Statistic=c("Coef_Deter", "AUC"),
Value = c(coefDeter_Basic, roc_obj_basic$auc),
Model=rep("a_Basic"),2),
data.table(Statistic=c("Coef_Deter","AUC"),
Value = c(coefDeter_Int, roc_obj_int$auc),
Model=rep("b_Intermediate",2)),
data.table(Statistic=("Coef_Deter",AUC),
# --- Plotting model diagnostics
# - Creating the plotting dataset
datPlot_diag <- rbind(data.table(Statistic=c("Coef_Deter", "AUC"),
Value = c(coefDeter_Basic, roc_obj_basic$auc),
Model=rep("a_Basic",2)),
data.table(Statistic=c("Coef_Deter","AUC"),
Value = c(coefDeter_Int, roc_obj_int$auc),
Model=rep("b_Intermediate",2)),
data.table(Statistic=c("Coef_Deter",AUC),
Value = c(coefDeter_Adv,roc_obj_int$auc),
Model=rep("c_Advanced",2)))
# --- Plotting model diagnostics
# - Creating the plotting dataset
datPlot_diag <- rbind(data.table(Statistic=c("Coef_Deter", "AUC"),
Value = c(coefDeter_Basic, roc_obj_basic$auc),
Model=rep("a_Basic",2)),
data.table(Statistic=c("Coef_Deter","AUC"),
Value = c(coefDeter_Int, roc_obj_int$auc),
Model=rep("b_Intermediate",2)),
data.table(Statistic=c("Coef_Deter","AUC"),
Value = c(coefDeter_Adv,roc_obj_int$auc),
Model=rep("c_Advanced",2)))
datPlot_diag[,Label:=paste0(sprintf("%.2f", Value*100),"%")]
# - Plotting parameters
chosenFont <- "Cambria"; dpi<-180
col.v <- brewer.pal(9, "Blues")[c(4,7,9)]
col.v2 <- rep(c(col.v[1], col.v[2], col.v[3]),1)
col.v3 <- rep("white", 3)
linetype.v <- c(3,4)
label.v <- list("a_Basic"="Basic",
"b_Intermediate"="Intermediate",
"c_Advanced"="Advanced")
(g_model_diag_compar <- ggplot(datPlot_diag, aes(x=Statistic, y=Value, group=Model)) +
theme_minimal() + theme(legend.position = "bottom") + labs(x="Statistic", y="Value") +
geom_col(aes(colour=Model, fill=Model), position="dodge") +
geom_label(aes(label=Label), fill = col.v2, colour = col.v3, position=position_dodge(0.9)) +
scale_colour_manual(name="Model:", values=col.v, labels=label.v) +
scale_fill_manual(name="Model:", values=col.v, labels=label.v) +
scale_x_discrete(labels=c("Coeffcient of Determination")) +
scale_y_continuous(breaks=pretty_breaks(), label=percent))
# - Plotting parameters
chosenFont <- "Cambria"; dpi<-180
col.v <- brewer.pal(9, "Blues")[c(4,7,9)]
col.v2 <- rep(c(col.v[1], col.v[2], col.v[3]),2)
col.v3 <- rep("white", 3*2)
linetype.v <- c(3,4)
label.v <- list("a_Basic"="Basic",
"b_Intermediate"="Intermediate",
"c_Advanced"="Advanced")
(g_model_diag_compar <- ggplot(datPlot_diag, aes(x=Statistic, y=Value, group=Model)) +
theme_minimal() + theme(legend.position = "bottom") + labs(x="Statistic", y="Value") +
geom_col(aes(colour=Model, fill=Model), position="dodge") +
geom_label(aes(label=Label), fill = col.v2, colour = col.v3, position=position_dodge(0.9)) +
scale_colour_manual(name="Model:", values=col.v, labels=label.v) +
scale_fill_manual(name="Model:", values=col.v, labels=label.v) +
scale_x_discrete(labels=c("Coeffcient of Determination")) +
scale_y_continuous(breaks=pretty_breaks(), label=percent))
(g_model_diag_compar <- ggplot(datPlot_diag, aes(x=Statistic, y=Value, group=Model)) +
theme_minimal() + theme(legend.position = "bottom") + labs(x="Statistic", y="Value") +
geom_col(aes(colour=Model, fill=Model), position="dodge") +
geom_label(aes(label=Label), fill = col.v2, colour = col.v3, position=position_dodge(0.9)) +
scale_colour_manual(name="Model:", values=col.v, labels=label.v) +
scale_fill_manual(name="Model:", values=col.v, labels=label.v) +
scale_x_discrete(labels=c("AUC","Coeffcient of Determination")) +
scale_y_continuous(breaks=pretty_breaks(), label=percent))
# --- Plotting model diagnostics
# - Creating the plotting dataset
datPlot_diag <- rbind(data.table(Statistic=c("Coef_Deter", "AUC"),
Value = c(coefDeter_Basic, roc_obj_basic$auc),
Model=rep("a_Basic",2)),
data.table(Statistic=c("Coef_Deter","AUC"),
Value = c(coefDeter_Int, roc_obj_int$auc),
Model=rep("b_Intermediate",2)),
data.table(Statistic=c("Coef_Deter","AUC"),
Value = c(coefDeter_Adv,roc_obj_adv$auc),
Model=rep("c_Advanced",2)))
datPlot_diag[,Label:=paste0(sprintf("%.2f", Value*100),"%")]
# - Plotting parameters
chosenFont <- "Cambria"; dpi<-180
col.v <- brewer.pal(9, "Blues")[c(4,7,9)]
col.v2 <- rep(c(col.v[1], col.v[2], col.v[3]),2)
col.v3 <- rep("white", 3*2)
linetype.v <- c(3,4)
label.v <- list("a_Basic"="Basic",
"b_Intermediate"="Intermediate",
"c_Advanced"="Advanced")
(g_model_diag_compar <- ggplot(datPlot_diag, aes(x=Statistic, y=Value, group=Model)) +
theme_minimal() + theme(legend.position = "bottom") + labs(x="Statistic", y="Value") +
geom_col(aes(colour=Model, fill=Model), position="dodge") +
geom_label(aes(label=Label), fill = col.v2, colour = col.v3, position=position_dodge(0.9)) +
scale_colour_manual(name="Model:", values=col.v, labels=label.v) +
scale_fill_manual(name="Model:", values=col.v, labels=label.v) +
scale_x_discrete(labels=c("AUC","Coeffcient of Determination")) +
scale_y_continuous(breaks=pretty_breaks(), label=percent))
(g_model_diag_compar <- ggplot(datPlot_diag, aes(x=Statistic, y=Value, group=Model)) +
theme_minimal() + theme(legend.position = "bottom") + labs(x="Statistic", y="Value") +
geom_col(aes(colour=Model, fill=Model), position="dodge") +
geom_label(aes(label=Label), fill = col.v2, colour = col.v3, position=position_dodge(0.9)) +
scale_colour_manual(name="Model:", values=col.v, labels=label.v) +
scale_fill_manual(name="Model:", values=col.v, labels=label.v) +
scale_x_discrete(labels=c("AUC"="AUC","Coef_Deter"="Coeffcient of Determination")) +
scale_y_continuous(breaks=pretty_breaks(), label=percent))
col.v2 <- rep(c(col.v[2], col.v[1], col.v[3]),2)
col.v3 <- rep("white", 3*2)
linetype.v <- c(3,4)
label.v <- list("a_Basic"="Basic",
"b_Intermediate"="Intermediate",
"c_Advanced"="Advanced")
(g_model_diag_compar <- ggplot(datPlot_diag, aes(x=Statistic, y=Value, group=Model)) +
theme_minimal() + theme(legend.position = "bottom") + labs(x="Statistic", y="Value") +
geom_col(aes(colour=Model, fill=Model), position="dodge") +
geom_label(aes(label=Label), fill = col.v2, colour = col.v3, position=position_dodge(0.9)) +
scale_colour_manual(name="Model:", values=col.v, labels=label.v) +
scale_fill_manual(name="Model:", values=col.v, labels=label.v) +
scale_x_discrete(labels=c("AUC"="AUC","Coef_Deter"="Coeffcient of Determination")) +
scale_y_continuous(breaks=pretty_breaks(), label=percent))
col.v <- c("a_Basic"=brewer.pal(9, "Blues")[4], "a_Intermediate"=brewer.pal(9, "Blues")[7], "a_Advanced"=brewer.pal(9, "Blues")[9])
col.v
# - Plotting parameters
chosenFont <- "Cambria"; dpi<-180
col.v <- c("a_Basic"=brewer.pal(9, "Blues")[4], "a_Intermediate"=brewer.pal(9, "Blues")[7], "a_Advanced"=brewer.pal(9, "Blues")[9])
col.v2 <- rep(c("a_Basic"=col.v[1], "b_Intermediate"=col.v[2], "c_Advanced"=col.v[3]),2)
col.v3 <- rep("white", 3*2)
linetype.v <- c(3,4)
label.v <- list("a_Basic"="Basic",
"b_Intermediate"="Intermediate",
"c_Advanced"="Advanced")
# - Creating the clustered column chart
(g_model_diag_compar <- ggplot(datPlot_diag, aes(x=Statistic, y=Value, group=Model)) +
theme_minimal() + theme(legend.position = "bottom") + labs(x="Statistic", y="Value") +
geom_col(aes(colour=Model, fill=Model), position="dodge") +
geom_label(aes(label=Label), fill = col.v2, colour = col.v3, position=position_dodge(0.9)) +
scale_colour_manual(name="Model:", values=col.v, labels=label.v) +
scale_fill_manual(name="Model:", values=col.v, labels=label.v) +
scale_x_discrete(labels=c("AUC"="AUC","Coef_Deter"="Coeffcient of Determination")) +
scale_y_continuous(breaks=pretty_breaks(), label=percent))
col.v <- c("a_Basic"=brewer.pal(9, "Blues")[4], "b_Intermediate"=brewer.pal(9, "Blues")[7], "c_Advanced"=brewer.pal(9, "Blues")[9])
col.v2 <- rep(c("a_Basic"=col.v[1], "b_Intermediate"=col.v[2], "c_Advanced"=col.v[3]),2)
col.v3 <- rep("white", 3*2)
linetype.v <- c(3,4)
label.v <- list("a_Basic"="Basic",
"b_Intermediate"="Intermediate",
"c_Advanced"="Advanced")
# - Creating the clustered column chart
(g_model_diag_compar <- ggplot(datPlot_diag, aes(x=Statistic, y=Value, group=Model)) +
theme_minimal() + theme(legend.position = "bottom") + labs(x="Statistic", y="Value") +
geom_col(aes(colour=Model, fill=Model), position="dodge") +
geom_label(aes(label=Label), fill = col.v2, colour = col.v3, position=position_dodge(0.9)) +
scale_colour_manual(name="Model:", values=col.v, labels=label.v) +
scale_fill_manual(name="Model:", values=col.v, labels=label.v) +
scale_x_discrete(labels=c("AUC"="AUC","Coef_Deter"="Coeffcient of Determination")) +
scale_y_continuous(breaks=pretty_breaks(), label=percent))
datPlot_diag
col.v
col.v2
c("a_Basic"=col.v[1], "b_Intermediate"=col.v[2], "c_Advanced"=col.v[3])
col.v[1]
# --- Plotting model diagnostics
# - Creating the plotting dataset
datPlot_diag <- rbind(data.table(Statistic=c("Coef_Deter", "AUC"),
Value = c(coefDeter_Basic, roc_obj_basic$auc),
Model=rep("a_Basic",2)),
data.table(Statistic=c("Coef_Deter","AUC"),
Value = c(coefDeter_Int, roc_obj_int$auc),
Model=rep("b_Intermediate",2)),
data.table(Statistic=c("Coef_Deter","AUC"),
Value = c(coefDeter_Adv,roc_obj_adv$auc),
Model=rep("c_Advanced",2)))
datPlot_diag[,Label:=paste0(sprintf("%.2f", Value*100),"%")]
# - Plotting parameters
chosenFont <- "Cambria"; dpi<-180
col.v <- c("a_Basic"=brewer.pal(9, "Blues")[4], "b_Intermediate"=brewer.pal(9, "Blues")[7], "c_Advanced"=brewer.pal(9, "Blues")[9])
col.v2 <- rep(c(col.v[1], col.v[2], col.v[3]),2)
col.v3 <- rep("white", 3*2)
linetype.v <- c(3,4)
label.v <- list("a_Basic"="Basic",
"b_Intermediate"="Intermediate",
"c_Advanced"="Advanced")
# - Creating the clustered column chart
(g_model_diag_compar <- ggplot(datPlot_diag, aes(x=Statistic, y=Value, group=Model)) +
theme_minimal() + theme(legend.position = "bottom") + labs(x="Statistic", y="Value") +
geom_col(aes(colour=Model, fill=Model), position="dodge") +
geom_label(aes(label=Label), fill = col.v2, colour = col.v3, position=position_dodge(0.9)) +
scale_colour_manual(name="Model:", values=col.v, labels=label.v) +
scale_fill_manual(name="Model:", values=col.v, labels=label.v) +
scale_x_discrete(labels=c("AUC"="AUC","Coef_Deter"="Coeffcient of Determination")) +
scale_y_continuous(breaks=pretty_breaks(), label=percent))
col.v
col.v2
datPlot_diag
col.v2 <- c(rep(col.v[1],2) rep(col.v[2],2) rep(col.v[3],2))
col.v3 <- rep("white", 3*2)
linetype.v <- c(3,4)
label.v <- list("a_Basic"="Basic",
"b_Intermediate"="Intermediate",
"c_Advanced"="Advanced")
col.v2 <- c(rep(col.v[1],2), rep(col.v[2],2) rep(col.v[3],2))
col.v <- c("a_Basic"=brewer.pal(9, "Blues")[4], "b_Intermediate"=brewer.pal(9, "Blues")[7], "c_Advanced"=brewer.pal(9, "Blues")[9])
col.v2 <- c(rep(col.v[1],2), rep(col.v[2],2) rep(col.v[3],2))
col.v3 <- rep("white", 3*2)
linetype.v <- c(3,4)
col.v2 <- c(rep(col.v[1],2), rep(col.v[2],2), rep(col.v[3],2))
col.v3 <- rep("white", 3*2)
linetype.v <- c(3,4)
label.v <- list("a_Basic"="Basic",
"b_Intermediate"="Intermediate",
"c_Advanced"="Advanced")
# - Creating the clustered column chart
(g_model_diag_compar <- ggplot(datPlot_diag, aes(x=Statistic, y=Value, group=Model)) +
theme_minimal() + theme(legend.position = "bottom") + labs(x="Statistic", y="Value") +
geom_col(aes(colour=Model, fill=Model), position="dodge") +
geom_label(aes(label=Label), fill = col.v2, colour = col.v3, position=position_dodge(0.9)) +
scale_colour_manual(name="Model:", values=col.v, labels=label.v) +
scale_fill_manual(name="Model:", values=col.v, labels=label.v) +
scale_x_discrete(labels=c("AUC"="AUC","Coef_Deter"="Coeffcient of Determination")) +
scale_y_continuous(breaks=pretty_breaks(), label=percent))
rm(list=ls())
# =================================== SETUP =============================================
# Setting up R environment, parameters, and function definitions
# ---------------------------------------------------------------------------------------
# PROJECT TITLE: Classifier Diagnostics
# SCRIPT AUTHOR(S): Dr Arno Botha, Roelinde Bester, Marcel Muller, Roland Breedt
# DESCRIPTION:
# This script installs and loads various libraries and packages, compiles all
# custom functions, and set requisite parameters.
# ---------------------------------------------------------------------------------------
# -- Inputs:
#   - DelinqM.R | Delinquency measures and related functions
#   - TruEnd.R | TruEnd-procedure and related functions
#   - 0a.CustomFunctions | Multi-project library of custom & curated functions
# =======================================================================================
# ================ 0. Library setup
# ------ Install and load packages
# - data access and big data management
require(haven) # for SAS imports
require(ETLUtils)
require(ffbase)
require(ff)
tempPath <- "C:/TempData"; options("fftempdir"=tempPath)
# for data wrangling
require(tidyr)
require(dplyr)
require(data.table)
require(lubridate)
require(readr)
require(bit64) # for very big numeric values
require(foreach); require(doParallel) # for multi-threaded computing
require(stringr) # common string operations, e.g, str_pad
require(purrr) # mapping functions from tidyverse in working with matrices, lists
require(writexl) #for exporting to Excel
require(zoo)
# for analyses & modelling
require(Hmisc)
require(survival) # for survival modelling
require(pROC); require(ROCR) # both for conducting ROC-analyses
require(ModelMetrics) # getting a confusion matrix
require(DEoptimR) # Robust Optimisation Tool
# for graphics
require(ggplot2)
require(corrplot) # For correlation plots
require(scales)
require(ggthemes)
require(ggpp) # Extensions to ggplot2, particularly geom_table
require(RColorBrewer)
require(extrafont) #remotes::install_version("Rttf2pt1", version = "1.3.8"); Sys.setenv(R_GSCMD="C:/Program Files/gs/gs9.55.0/bin/gswin32c.exe"); font_import(); loadfonts(); loadfonts(device="win")
require(survminer)
require(gridExtra)
# ================ 1. Parametrisation
# - general R options
options(scipen=999) # Suppress showing scientific notation
# - Parameters used in calculating delinquency measures
sc.Thres <- 0.9; # repayment ratio - g1
d <- 3 # default threshold for g0/g1-measures of delinquency (payments in arrears)
k <- 6 # Probation period
# -- Path variables | General
# - Common path for saving big data objects
genPath <- "C:/Data/Classifier-Diagnostics_Data/"
# - Common path for importing raw data
genRawPath <- "C:/Data/"
# -- Path variables | User-dependent
if (Sys.getenv("USERNAME") == "WRQ") {
# - Custom path where R-scripts are saved
path_cust <- "C:/Users/WRQ/OneDrive - FRG/Analytix/Research/Classifier-Diagnostics/Scripts/"
# - Common path for storing important R-objects as back-up
genObjPath <- "C:/Users/WRQ/OneDrive - FRG/Analytix/Research/Classifier-Diagnostics/Objects/"
# - Common path for saving important analytics (e.g., sampling)
genFigPath <- "C:/Users/WRQ/OneDrive - FRG/Analytix/Research/Classifier-Diagnostics/Figures/"
# --- Custom path where R-scripts are saved
} else if (Sys.getenv("USERNAME") == "Arno Botha") {
path_cust <- "E:/WorkLife/Analytix/Research/Classifier-Diagnostics/Scripts/"
# - Common path for storing important R-objects as back-up
genObjPath <- "E:/WorkLife/Analytix/Research/Classifier-Diagnostics/Objects/"
# - Common path for saving important analytics (e.g., sampling)
genFigPath <- "E:/WorkLife/Analytix/Research/Classifier-Diagnostics/Figures/"
# - Common path for saving big data objects
genPath <- "E:/DataDump/FNB SLC/Classifier-Diagnostics_Data/"
# - Common path for importing raw data
genRawPath <- "E:/DataDump/FNB SLC/"
} else if (Sys.getenv("USERNAME") == "R5532132") { # Marcel
# - Custom path where R-scripts are saved
path_cust <- "C:/Users/R5532132/OneDrive - FRG/GCRM/Classfier-Diagnostics Repository/Classifier-Diagnostics/Scripts/"
# - Common path for storing important R-objects as back-up
genObjPath <- "C:/Users/R5532132/OneDrive - FRG/GCRM/Classfier-Diagnostics Repository/Classifier-Diagnostics/Objects/"
# - Common path for saving important analytics (e.g., sampling)
genFigPath <- "C:/Users/R5532132/OneDrive - FRG/GCRM/Classfier-Diagnostics Repository/Classifier-Diagnostics/Figures/"
} else if (Sys.getenv("USERNAME") == "R5668395") { # Roland
# - Custom path where R-scripts are saved
path_cust <- "C:/Users/R5668395/Documents/GitHub ClassDiag/Classifier-Diagnostics/Scripts/"
# - Common path for storing important R-objects as back-up
genObjPath <- "C:/Users/R5668395/Documents/GitHub ClassDiag/Classifier-Diagnostics/Objects/"
# - Common path for saving important analytics (e.g., sampling)
genFigPath <- "C:/Users/R5668395/Documents/GitHub ClassDiag/Classifier-Diagnostics/Figures/"
} else {
stop("User-specific paths not set for current user: ", Sys.getenv("USERNAME"), ". Please fix in Setup script (0.Setup.R) before continuing")
}
# ================ 2. Custom functions
# ------ Custom function definitions
# - Load all custom functions defined in a separate R-script
source(paste0(path_cust,"0a.CustomFunctions.R"))
# - Compile Delinquency Calculation Functions (CD, MD/DoD)
source(paste0(path_cust,'DelinqM.R'))
# - Compile the TruEnd-suite of evaluation (and auxiliary) functions
source(paste0(path_cust,'TruEnd.R'))
?binconf
ptm <- proc.time() # for runtime calculations (ignore)
# - Graphing Parameters
chosenFont <- "Cambria"
dpi <- 180
# - Confirm prepared datasets are loaded into memory
if (!exists('datCredit_train')) unpack.ffdf(paste0(genPath,"creditdata_train"), tempPath)
if (!exists('datCredit_valid')) unpack.ffdf(paste0(genPath,"creditdata_valid"), tempPath)
if (!exists('datCredit_smp')) unpack.ffdf(paste0(genPath,"creditdata_smp"), tempPath)
# - Subset to exclude default spells
datCredit_train <- datCredit_train %>% subset(DefaultStatus1==0)
datCredit_valid <- datCredit_valid %>% subset(DefaultStatus1==0)
datCredit_smp <- datCredit_smp %>% subset(DefaultStatus1==0)
# - Load in basic, intermediate, and advanced model formulas
# Basic model
unpack.ffdf(paste0(genObjPath, "Basic_Com_Formula"), tempPath)
# Intermediate model
unpack.ffdf(paste0(genObjPath, "Int_Formula"), tempPath)
# Advanced model
unpack.ffdf(paste0(genObjPath, "Adv_Formula"), tempPath)
unpack.ffdf(paste0(genPath,"creditdata_train"), tempPath); unpack.ffdf(paste0(genObjPath, "Basic_Com_Formula"), tempPath)
logit_model <- glm(inputs_bas, data=datCredit_train, family="binomial")
method <- "stdCoef_Menard"; sig_level<-0.05; impPlot<-T; pd_plot<-T; chosenFont="Cambria"; colPalette="BrBG"; colPaletteDir=1
plotName=paste0(genFigPath, "VariableImportance_", method,".png"); limitVars=10
# - Safety check
if (!any(class(logit_model) %in% c("glm", "lm"))) stop("Specified model object is not of class 'glm' or 'lm'. Exiting .. ")
# --- 0. Setup
# - Get the data the model was trained on
datTrain1 <- subset(logit_model$data, select = names(logit_model$data)[names(logit_model$data) %in% names(model.frame(logit_model))])
# Getting the names of the original training dataset
datTrain1_names <- names(datTrain1)
# - Filtering for significant variables
coefficients_summary <- data.table(names=names(summary(logit_model)$coefficients[,4][-1]), sig=summary(logit_model)$coefficients[,4][-1],
coefficient=summary(logit_model)$coefficients[,1][-1], se=summary(logit_model)$coefficients[,2][-1]) %>% arrange(names) # Names of variables in the model
coefficients_summary
coefficients_sig_model_level <- as.list(rep(0,coefficients_summary[,.N])) # Corresponding level name of the categorical variable; NULL in the case of a numeric or integer variable
coefficients_data <-  data.table(names=names(datTrain1)[-which(names(datTrain1) %in% names(model.frame(logit_model))[1])]) %>% arrange(names) # Names of variables training dataset
coefficients_sig_data_index <- rep(0,coefficients_summary[,.N]) # Index showing if the variable in the model is significant or not
coefficients_sig_data <- rep(0,coefficients_summary[,.N]) # Names of the significant variable's associated column name in the training dataset
sig_level <- ifelse(is.na(sig_level),1,sig_level) # The significance level against which each variable must be tested
k <- 1 # Counter
1:length(coefficients_data$names)
class(datTrain1[,get(coefficients_data$names[i])])
i<-1
class(datTrain1[,get(coefficients_data$names[i])])
coefficients_data$names
unpack.ffdf(paste0(genPath,"creditdata_train"), tempPath); unpack.ffdf(paste0(genObjPath, "Adv_Formula"), tempPath)
logit_model <- glm(inputs_bas, data=datCredit_train, family="binomial")
# - Safety check
if (!any(class(logit_model) %in% c("glm", "lm"))) stop("Specified model object is not of class 'glm' or 'lm'. Exiting .. ")
# --- 0. Setup
# - Get the data the model was trained on
datTrain1 <- subset(logit_model$data, select = names(logit_model$data)[names(logit_model$data) %in% names(model.frame(logit_model))])
# Getting the names of the original training dataset
datTrain1_names <- names(datTrain1)
# - Filtering for significant variables
coefficients_summary <- data.table(names=names(summary(logit_model)$coefficients[,4][-1]), sig=summary(logit_model)$coefficients[,4][-1],
coefficient=summary(logit_model)$coefficients[,1][-1], se=summary(logit_model)$coefficients[,2][-1]) %>% arrange(names) # Names of variables in the model
coefficients_sig_model_level <- as.list(rep(0,coefficients_summary[,.N])) # Corresponding level name of the categorical variable; NULL in the case of a numeric or integer variable
coefficients_data <-  data.table(names=names(datTrain1)[-which(names(datTrain1) %in% names(model.frame(logit_model))[1])]) %>% arrange(names) # Names of variables training dataset
coefficients_sig_data_index <- rep(0,coefficients_summary[,.N]) # Index showing if the variable in the model is significant or not
coefficients_sig_data <- rep(0,coefficients_summary[,.N]) # Names of the significant variable's associated column name in the training dataset
sig_level <- ifelse(is.na(sig_level),1,sig_level) # The significance level against which each variable must be tested
coefficients_data$names
coefficients_summary
logit_model
logit_model <- glm(inputs_bas, data=datCredit_train, family="binomial")
logit_model
logit_model <- glm(inputs_adv, data=datCredit_train, family="binomial")
logit_model
i<-12
# - Filtering for significant variables
coefficients_summary <- data.table(names=names(summary(logit_model)$coefficients[,4][-1]), sig=summary(logit_model)$coefficients[,4][-1],
coefficient=summary(logit_model)$coefficients[,1][-1], se=summary(logit_model)$coefficients[,2][-1]) %>% arrange(names) # Names of variables in the model
coefficients_sig_model_level <- as.list(rep(0,coefficients_summary[,.N])) # Corresponding level name of the categorical variable; NULL in the case of a numeric or integer variable
coefficients_data <-  data.table(names=names(datTrain1)[-which(names(datTrain1) %in% names(model.frame(logit_model))[1])]) %>% arrange(names) # Names of variables training dataset
coefficients_sig_data_index <- rep(0,coefficients_summary[,.N]) # Index showing if the variable in the model is significant or not
coefficients_sig_data <- rep(0,coefficients_summary[,.N]) # Names of the significant variable's associated column name in the training dataset
sig_level <- ifelse(is.na(sig_level),1,sig_level) # The significance level against which each variable must be tested
k <- 1 # Counter
class(datTrain1[,get(coefficients_data$names[i])])
i
coefficients_data$names[i]
coefficients_data$names
coefficients_data <-  data.table(names=names(datTrain1)[-which(names(datTrain1) %in% names(model.frame(logit_model))[1])]) %>% arrange(names) # Names of variables training dataset
coefficients_data
# --- 0. Setup
# - Get the data the model was trained on
datTrain1 <- subset(logit_model$data, select = names(logit_model$data)[names(logit_model$data) %in% names(model.frame(logit_model))])
# Getting the names of the original training dataset
datTrain1_names <- names(datTrain1)
# - Filtering for significant variables
coefficients_summary <- data.table(names=names(summary(logit_model)$coefficients[,4][-1]), sig=summary(logit_model)$coefficients[,4][-1],
coefficient=summary(logit_model)$coefficients[,1][-1], se=summary(logit_model)$coefficients[,2][-1]) %>% arrange(names) # Names of variables in the model
coefficients_sig_model_level <- as.list(rep(0,coefficients_summary[,.N])) # Corresponding level name of the categorical variable; NULL in the case of a numeric or integer variable
coefficients_data <-  data.table(names=names(datTrain1)[-which(names(datTrain1) %in% names(model.frame(logit_model))[1])]) %>% arrange(names) # Names of variables training dataset
coefficients_sig_data_index <- rep(0,coefficients_summary[,.N]) # Index showing if the variable in the model is significant or not
coefficients_sig_data <- rep(0,coefficients_summary[,.N]) # Names of the significant variable's associated column name in the training dataset
sig_level <- ifelse(is.na(sig_level),1,sig_level) # The significance level against which each variable must be tested
k <- 1 # Counter
coefficients_data
i
i<-11
class(datTrain1[,get(coefficients_data$names[i])])
levels_n <- length(unique(datTrain1[,get(coefficients_data$names[i])]))-1
coefficients_sig_data_index[k:(k+levels_n-1)] <- rep(ifelse(any(coefficients_summary$sig[k:(k+levels_n-2)]<=sig_level),T,F),levels_n) # Checking if any levels of this variable is significant
coefficients_sig_data[k:(k+levels_n-1)] <- as.character(coefficients_data[i,])
levels_n
unique(datTrain1[,get(coefficients_data$names[i])])[order(unique(datTrain1[,get(coefficients_data$names[i])]))][-1][j]
j<-1
coefficients_sig_model_level[[k+j-1]] <- unique(datTrain1[,get(coefficients_data$names[i])])[order(unique(datTrain1[,get(coefficients_data$names[i])]))][-1][j]
coefficients_sig_model_level
unique(datTrain1[,get(coefficients_data$names[i])])[order(unique(datTrain1[,get(coefficients_data$names[i])]))][-1][j]
coefficients_sig_model_level[[k+j-1]]
k<-k+levels_n
k
k<-11
coefficients_sig_model_level[[k+j-1]] <- unique(datTrain1[,get(coefficients_data$names[i])])[order(unique(datTrain1[,get(coefficients_data$names[i])]))][-1][j]
coefficients_sig_model_level
k<-k+levels_n
k
coefficients_sig_model <- coefficients_summary$names[coefficients_sig_data_index==1] # Names of variables in model (may be more than the number of variables in the training dataset due to hot one encoding)
coefficients_sig_model
coefficients_sig_data_index
k<-11
coefficients_sig_data[k:(k+levels_n-1)] <- as.character(coefficients_data[i,])
coefficients_sig_data_index[k:(k+levels_n-1)] <- rep(ifelse(any(coefficients_summary$sig[k:(k+levels_n-2)]<=sig_level),T,F),levels_n) # Checking if any levels of this variable is significant
coefficients_sig_data_index
coefficients_sig_model <- coefficients_summary$names[coefficients_sig_data_index==1] # Names of variables in model (may be more than the number of variables in the training dataset due to hot one encoding)
coefficients_sig_model_level <- coefficients_sig_model_level[!coefficients_sig_data_index==0] # The chain ensures that only levels of the significant categorical variables are chosen
coefficients_sig_data <- coefficients_sig_data[coefficients_sig_data_index==1] # The chaining ensures that only the columns pertaining to the significant variables are chosen
coefficients_sig_model
coefficients_sig_model_level
coefficients_sig_data <- coefficients_sig_data[coefficients_sig_data_index==1] # The chaining ensures that only the columns pertaining to the significant variables are chosen
coefficients_sig_data
coefficients_sig_data<-coefficients_sig_data[1]
# - Stopping the function if there are no significant variables
if (is.null(coefficients_data)) stop("ERROR: Variable importance not conducted since there are no significant variables.")
# - Initiating the dataset to be returned (results dataset)
results <- list(data = data.table(Variable = coefficients_sig_model,Value = 0,Rank = 0))
results
coefficients_sig_data
method
datTrain2
# Scaling the variables
datTrain2 <- copy(datTrain1)
length(unique(coefficients_sig_data)
)
class(datTrain2[, get(unique(coefficients_sig_data)[i])])
coefficients_sig_data
i
i<-1
class(datTrain2[, get(unique(coefficients_sig_data)[i])]
)
(unique(coefficients_sig_data)[i])
coefficients_sig_data
unique(coefficients_sig_data)
unique(coefficients_sig_data)
0:10
binconf(0:10,10,include.x=TRUE,include.n=TRUE)
binconf(sum(datTrain2$PrevDefaults),datTrain2[,.N])
binconf(x=sum(datTrain2$PrevDefaults),n=datTrain2[,.N],alpha=0.05)
sum(datTrain2$PrevDefaults)/datTrain2[,.N]
rm(list=ls())
